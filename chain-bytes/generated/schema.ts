// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Worker extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Worker entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Worker must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Worker", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Worker | null {
    return changetype<Worker | null>(store.get_in_block("Worker", id));
  }

  static load(id: string): Worker | null {
    return changetype<Worker | null>(store.get("Worker", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get daysWorked(): i32 {
    let value = this.get("daysWorked");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set daysWorked(value: i32) {
    this.set("daysWorked", Value.fromI32(value));
  }

  get daysUnpaid(): i32 {
    let value = this.get("daysUnpaid");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set daysUnpaid(value: i32) {
    this.set("daysUnpaid", Value.fromI32(value));
  }

  get payments(): PaymentLoader {
    return new PaymentLoader("Worker", this.get("id")!.toString(), "payments");
  }

  get hasForeman(): Array<string> | null {
    let value = this.get("hasForeman");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set hasForeman(value: Array<string> | null) {
    if (!value) {
      this.unset("hasForeman");
    } else {
      this.set("hasForeman", Value.fromStringArray(<Array<string>>value));
    }
  }

  get checkIns(): CheckInLoader {
    return new CheckInLoader("Worker", this.get("id")!.toString(), "checkIns");
  }
}

export class Farm extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Farm entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Farm must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Farm", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Farm | null {
    return changetype<Farm | null>(store.get_in_block("Farm", id));
  }

  static load(id: string): Farm | null {
    return changetype<Farm | null>(store.get("Farm", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get farmCheckIns(): CheckInLoader {
    return new CheckInLoader(
      "Farm",
      this.get("id")!.toString(),
      "farmCheckIns",
    );
  }

  get hasForemen(): ForemanLoader {
    return new ForemanLoader("Farm", this.get("id")!.toString(), "hasForemen");
  }

  get madePayments(): PaymentLoader {
    return new PaymentLoader(
      "Farm",
      this.get("id")!.toString(),
      "madePayments",
    );
  }
}

export class Foreman extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Foreman entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Foreman must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Foreman", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Foreman | null {
    return changetype<Foreman | null>(store.get_in_block("Foreman", id));
  }

  static load(id: string): Foreman | null {
    return changetype<Foreman | null>(store.get("Foreman", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get hasFarm(): string {
    let value = this.get("hasFarm");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set hasFarm(value: string) {
    this.set("hasFarm", Value.fromString(value));
  }

  get madeCheckIns(): CheckInLoader {
    return new CheckInLoader(
      "Foreman",
      this.get("id")!.toString(),
      "madeCheckIns",
    );
  }

  get hasWorkers(): WorkerLoader {
    return new WorkerLoader(
      "Foreman",
      this.get("id")!.toString(),
      "hasWorkers",
    );
  }
}

export class Payment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Payment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Payment must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Payment", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Payment | null {
    return changetype<Payment | null>(store.get_in_block("Payment", id));
  }

  static load(id: string): Payment | null {
    return changetype<Payment | null>(store.get("Payment", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get year(): i32 {
    let value = this.get("year");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set year(value: i32) {
    this.set("year", Value.fromI32(value));
  }

  get month(): i32 {
    let value = this.get("month");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set month(value: i32) {
    this.set("month", Value.fromI32(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get daysPaidFor(): i32 {
    let value = this.get("daysPaidFor");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set daysPaidFor(value: i32) {
    this.set("daysPaidFor", Value.fromI32(value));
  }

  get farmWhoPaid(): string {
    let value = this.get("farmWhoPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set farmWhoPaid(value: string) {
    this.set("farmWhoPaid", Value.fromString(value));
  }

  get workerPaid(): string {
    let value = this.get("workerPaid");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set workerPaid(value: string) {
    this.set("workerPaid", Value.fromString(value));
  }
}

export class CheckIn extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CheckIn entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CheckIn must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CheckIn", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CheckIn | null {
    return changetype<CheckIn | null>(store.get_in_block("CheckIn", id));
  }

  static load(id: string): CheckIn | null {
    return changetype<CheckIn | null>(store.get("CheckIn", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get year(): i32 {
    let value = this.get("year");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set year(value: i32) {
    this.set("year", Value.fromI32(value));
  }

  get month(): i32 {
    let value = this.get("month");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set month(value: i32) {
    this.set("month", Value.fromI32(value));
  }

  get day(): i32 {
    let value = this.get("day");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set day(value: i32) {
    this.set("day", Value.fromI32(value));
  }

  get farmCheckedInAt(): string {
    let value = this.get("farmCheckedInAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set farmCheckedInAt(value: string) {
    this.set("farmCheckedInAt", Value.fromString(value));
  }

  get foremanWhoChecked(): string {
    let value = this.get("foremanWhoChecked");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set foremanWhoChecked(value: string) {
    this.set("foremanWhoChecked", Value.fromString(value));
  }

  get workerCheckedIn(): string {
    let value = this.get("workerCheckedIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set workerCheckedIn(value: string) {
    this.set("workerCheckedIn", Value.fromString(value));
  }
}

export class PaymentLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Payment[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Payment[]>(value);
  }
}

export class CheckInLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CheckIn[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CheckIn[]>(value);
  }
}

export class ForemanLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Foreman[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Foreman[]>(value);
  }
}

export class WorkerLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Worker[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Worker[]>(value);
  }
}
